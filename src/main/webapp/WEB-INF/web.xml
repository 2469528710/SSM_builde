<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <display-name>Archetype Created Web Application</display-name>

    <!--配置前端控制器-->
    <servlet>
        <servlet-name>DispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--加载springMvc.xml文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springMvc.xml</param-value>
        </init-param>
        <!--一启动服务器就创建servlet-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!--映射文件-->
    <!--在 Tomcat 中处理静态资源的 servlet(default)所映射路径为就是"/".
        在启动项目的时候,在 Tomcat 中的 web.xml 是先加载,项目的 web.xml 是后加载,
        如果配置了相同 的映射路径,项目中的 web.xml 会覆盖 Tomcat 中 web.xml 相同的配置.
        也就是说,SpringMVC 中的 DispatcherServlet 的映射路径覆盖了 Tomcat 默认对静态资源
        的处理的 路径.此时 SpringMVC 会把静态资源当做是 Controller,寻找并访问,
        当然结果肯定是找不到.-->
    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--解决中文乱码问题-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--spring整合springmvc-->
    <!--整合成功的表现：在controller（SpringMVC）中能成功的调用service（Spring）对象中的方法。
        要想在controller中调用service方法，就要注入service到controller中来，
        有service对象才可以调用service方法，方法是这样没有错，但是有一个问题，
        就是启动Tomcat之后试想一下，在web.xml中配置有前端控制器，
        web容器会帮我们加载springmvc.xml配置文件，
        在springmvc.xml配置文件中我们配置情况是只扫描controller，别的不扫，
        而spring.xml文件就从头到尾没有执行过，spring中的配置扫描自然也不会去扫描，
        就相当于没有将spring交到IOC容器当中去，所以，现在的解决方案就是，
        在启动服务器时就加载spring配置文件,怎么实现呢？这时候监听器listener就派上用场了-->
    <!--配置spring监听器，默认只加载WEB-INF目录下的applicationContext.xml文件-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--设置配置文件的路径-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>
</web-app>
